// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user_service.proto

#include "include/user_service.pb.h"
#include "include/user_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_user {

static const char* TethysUserService_method_names[] = {
  "/grpc_user.TethysUserService/PushService",
  "/grpc_user.TethysUserService/KeyExService",
  "/grpc_user.TethysUserService/UserService",
  "/grpc_user.TethysUserService/SignerService",
};

std::unique_ptr< TethysUserService::Stub> TethysUserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TethysUserService::Stub> stub(new TethysUserService::Stub(channel));
  return stub;
}

TethysUserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushService_(TethysUserService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_KeyExService_(TethysUserService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserService_(TethysUserService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignerService_(TethysUserService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::grpc_user::Message>* TethysUserService::Stub::PushServiceRaw(::grpc::ClientContext* context, const ::grpc_user::Identity& request) {
  return ::grpc::internal::ClientReaderFactory< ::grpc_user::Message>::Create(channel_.get(), rpcmethod_PushService_, context, request);
}

::grpc::ClientAsyncReader< ::grpc_user::Message>* TethysUserService::Stub::AsyncPushServiceRaw(::grpc::ClientContext* context, const ::grpc_user::Identity& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpc_user::Message>::Create(channel_.get(), cq, rpcmethod_PushService_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::grpc_user::Message>* TethysUserService::Stub::PrepareAsyncPushServiceRaw(::grpc::ClientContext* context, const ::grpc_user::Identity& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::grpc_user::Message>::Create(channel_.get(), cq, rpcmethod_PushService_, context, request, false, nullptr);
}

::grpc::Status TethysUserService::Stub::KeyExService(::grpc::ClientContext* context, const ::grpc_user::Request& request, ::grpc_user::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KeyExService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_user::Reply>* TethysUserService::Stub::AsyncKeyExServiceRaw(::grpc::ClientContext* context, const ::grpc_user::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_user::Reply>::Create(channel_.get(), cq, rpcmethod_KeyExService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_user::Reply>* TethysUserService::Stub::PrepareAsyncKeyExServiceRaw(::grpc::ClientContext* context, const ::grpc_user::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_user::Reply>::Create(channel_.get(), cq, rpcmethod_KeyExService_, context, request, false);
}

::grpc::Status TethysUserService::Stub::UserService(::grpc::ClientContext* context, const ::grpc_user::Request& request, ::grpc_user::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UserService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_user::Reply>* TethysUserService::Stub::AsyncUserServiceRaw(::grpc::ClientContext* context, const ::grpc_user::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_user::Reply>::Create(channel_.get(), cq, rpcmethod_UserService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_user::Reply>* TethysUserService::Stub::PrepareAsyncUserServiceRaw(::grpc::ClientContext* context, const ::grpc_user::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_user::Reply>::Create(channel_.get(), cq, rpcmethod_UserService_, context, request, false);
}

::grpc::Status TethysUserService::Stub::SignerService(::grpc::ClientContext* context, const ::grpc_user::Request& request, ::grpc_user::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignerService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_user::Reply>* TethysUserService::Stub::AsyncSignerServiceRaw(::grpc::ClientContext* context, const ::grpc_user::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_user::Reply>::Create(channel_.get(), cq, rpcmethod_SignerService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_user::Reply>* TethysUserService::Stub::PrepareAsyncSignerServiceRaw(::grpc::ClientContext* context, const ::grpc_user::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_user::Reply>::Create(channel_.get(), cq, rpcmethod_SignerService_, context, request, false);
}

TethysUserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TethysUserService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TethysUserService::Service, ::grpc_user::Identity, ::grpc_user::Message>(
          std::mem_fn(&TethysUserService::Service::PushService), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TethysUserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TethysUserService::Service, ::grpc_user::Request, ::grpc_user::Reply>(
          std::mem_fn(&TethysUserService::Service::KeyExService), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TethysUserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TethysUserService::Service, ::grpc_user::Request, ::grpc_user::Reply>(
          std::mem_fn(&TethysUserService::Service::UserService), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TethysUserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TethysUserService::Service, ::grpc_user::Request, ::grpc_user::Reply>(
          std::mem_fn(&TethysUserService::Service::SignerService), this)));
}

TethysUserService::Service::~Service() {
}

::grpc::Status TethysUserService::Service::PushService(::grpc::ServerContext* context, const ::grpc_user::Identity* request, ::grpc::ServerWriter< ::grpc_user::Message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TethysUserService::Service::KeyExService(::grpc::ServerContext* context, const ::grpc_user::Request* request, ::grpc_user::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TethysUserService::Service::UserService(::grpc::ServerContext* context, const ::grpc_user::Request* request, ::grpc_user::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TethysUserService::Service::SignerService(::grpc::ServerContext* context, const ::grpc_user::Request* request, ::grpc_user::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_user

