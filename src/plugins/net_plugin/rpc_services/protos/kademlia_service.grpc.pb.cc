// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kademlia_service.proto

#include "include/kademlia_service.grpc.pb.h"
#include "include/kademlia_service.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kademlia {

static const char* KademliaService_method_names[] = {
  "/kademlia.KademliaService/FindNode",
};

std::unique_ptr< KademliaService::Stub> KademliaService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KademliaService::Stub> stub(new KademliaService::Stub(channel));
  return stub;
}

KademliaService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FindNode_(KademliaService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KademliaService::Stub::FindNode(::grpc::ClientContext* context, const ::kademlia::Target& request, ::kademlia::Neighbors* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FindNode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kademlia::Neighbors>* KademliaService::Stub::AsyncFindNodeRaw(::grpc::ClientContext* context, const ::kademlia::Target& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kademlia::Neighbors>::Create(channel_.get(), cq, rpcmethod_FindNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kademlia::Neighbors>* KademliaService::Stub::PrepareAsyncFindNodeRaw(::grpc::ClientContext* context, const ::kademlia::Target& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kademlia::Neighbors>::Create(channel_.get(), cq, rpcmethod_FindNode_, context, request, false);
}

KademliaService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KademliaService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KademliaService::Service, ::kademlia::Target, ::kademlia::Neighbors>(
          std::mem_fn(&KademliaService::Service::FindNode), this)));
}

KademliaService::Service::~Service() {
}

::grpc::Status KademliaService::Service::FindNode(::grpc::ServerContext* context, const ::kademlia::Target* request, ::kademlia::Neighbors* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kademlia

