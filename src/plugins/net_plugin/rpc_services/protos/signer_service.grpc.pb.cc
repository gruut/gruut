// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: signer_service.proto

#include "include/signer_service.grpc.pb.h"
#include "include/signer_service.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_signer {

static const char* GruutSignerService_method_names[] = {
  "/grpc_signer.GruutSignerService/OpenChannel",
  "/grpc_signer.GruutSignerService/SignerService",
};

std::unique_ptr< GruutSignerService::Stub> GruutSignerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GruutSignerService::Stub> stub(new GruutSignerService::Stub(channel));
  return stub;
}

GruutSignerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OpenChannel_(GruutSignerService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SignerService_(GruutSignerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::grpc_signer::Identity, ::grpc_signer::Request>* GruutSignerService::Stub::OpenChannelRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::grpc_signer::Identity, ::grpc_signer::Request>::Create(channel_.get(), rpcmethod_OpenChannel_, context);
}

::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::Request>* GruutSignerService::Stub::AsyncOpenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc_signer::Identity, ::grpc_signer::Request>::Create(channel_.get(), cq, rpcmethod_OpenChannel_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::grpc_signer::Identity, ::grpc_signer::Request>* GruutSignerService::Stub::PrepareAsyncOpenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::grpc_signer::Identity, ::grpc_signer::Request>::Create(channel_.get(), cq, rpcmethod_OpenChannel_, context, false, nullptr);
}

::grpc::Status GruutSignerService::Stub::SignerService(::grpc::ClientContext* context, const ::grpc_signer::Request& request, ::grpc_signer::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignerService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::Reply>* GruutSignerService::Stub::AsyncSignerServiceRaw(::grpc::ClientContext* context, const ::grpc_signer::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::Reply>::Create(channel_.get(), cq, rpcmethod_SignerService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_signer::Reply>* GruutSignerService::Stub::PrepareAsyncSignerServiceRaw(::grpc::ClientContext* context, const ::grpc_signer::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_signer::Reply>::Create(channel_.get(), cq, rpcmethod_SignerService_, context, request, false);
}

GruutSignerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GruutSignerService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< GruutSignerService::Service, ::grpc_signer::Identity, ::grpc_signer::Request>(
          std::mem_fn(&GruutSignerService::Service::OpenChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GruutSignerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GruutSignerService::Service, ::grpc_signer::Request, ::grpc_signer::Reply>(
          std::mem_fn(&GruutSignerService::Service::SignerService), this)));
}

GruutSignerService::Service::~Service() {
}

::grpc::Status GruutSignerService::Service::OpenChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_signer::Request, ::grpc_signer::Identity>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GruutSignerService::Service::SignerService(::grpc::ServerContext* context, const ::grpc_signer::Request* request, ::grpc_signer::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_signer

